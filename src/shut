#!/bin/sh
#
# run test cases

OPTIONS=`getopt -o t:s: -n "$0" -- "$@"`

eval set -- "$OPTIONS"

while true; do
	case "$1" in
	-s)
		shut_suite_opt="$2"
		shift 2
		;;
	-t)
		shut_target_opt="$2"
		shift 2
		;;
	--)
		shift
		break
		;;
	*)
		echo "*** internal error!"
		exit 1
		;;
	esac
done


die() {
	[ $# -gt 0 ] && echo "*** error: $@" >&2
	exit 1
}


. $(dirname $0)/functions || die "could not source own implementation!"

if [ "$shut_suite_opt" ]; then
	shut_suite=$shut_suite_opt
else
	echo "*** please provide test suite (-s <file>)"
	exit 1
fi

shut_suite_path=$(ensure_rel_path "$shut_suite")
echo "running test cases from '$shut_suite'"
. $shut_suite_path || die "*** could not source test suite '$shut_suite_path'"

if [ "$shut_target_opt" ]; then
	shut_target=$shut_target_opt
fi
if [ "$shut_target" ]; then
	if [ "$shut_target" != "_self" ]; then
		shut_target_path=$(ensure_rel_path "$shut_target")
	fi
fi

# if target not given on cmdline take it over from test suite
if [ -z "$shut_target_path" ] && [ "$SHUT_TARGET" ]; then
	shut_target=$SHUT_TARGET
	if [ "$shut_target" != "_self" ]; then
		shut_suite_dir=$(dirname $shut_suite_path)
		shut_target_path="${shut_suite_dir}/${shut_target}"
	fi
fi

if [ -z "$shut_target_path" ] && [ "$shut_target" != "_self" ]; then
	echo "*** please provide target impl (-t <file> | SHUT_TARGET=<file>)"
	exit 1
fi
echo "testing target impl in '$shut_target'"
. $shut_target_path || die "*** could not source target impl '$shut_target_path'"

ntests=$(echo "$SHUT_TESTS" | wc -w)
if [ $ntests -eq 0 ]; then
	echo "*** no tests registered in '$shut_suite'"
	exit 1
else
	echo "number of tests scheduled $ntests"
fi

echo
npassed=0; nfailed=0; ntotal=0
for i in ${SHUT_TESTS}; do
	if $i; then
		npassed=$(expr "$npassed" + 1)
	else
		nfailed=$(expr "$nfailed" + 1)
	fi
	ntotal=$(expr "$ntotal" + 1)
done

echo
echo "Summary"
echo "-------"
echo "tests total..: $ntotal"
echo "tests passed.: $npassed"
echo "tests failed.: $nfailed"

[ $nfailed -eq 0 ]
return $?
